const fs = require("fs");

// Step 1: Read and parse input
function getInput() {
    const input = fs.readFileSync('file.txt', "utf-8").trim().split('\n');
    const n = parseInt(input[0]);
    const events = input.slice(1, n + 1).map(line => {
        const [date, time, ...titleParts] = line.trim().split(" ");
        const eventTitle = titleParts.join(" ");
        return { date, time, eventTitle };
    });
    return { events };
}

// Step 2: Clean, validate and group events
function buildCalendar(events) {
    const formatDate = (dateStr) => {
        let parts = [];

        if (dateStr.match(/^\d{2}-\d{2}-\d{4}$/)) {
            parts = dateStr.split("-");
            const [part1, part2, year] = parts.map(Number);

            if (part1 > 12 && part2 <= 12) {
                // Clearly DD-MM-YYYY
                return `${year.toString().padStart(4, "0")}-${part2
                    .toString()
                    .padStart(2, "0")}-${part1.toString().padStart(2, "0")}`;
            } else if (part2 > 12 && part1 <= 12) {
                // Clearly MM-DD-YYYY
                return `${year.toString().padStart(4, "0")}-${part1
                    .toString()
                    .padStart(2, "0")}-${part2.toString().padStart(2, "0")}`;
            } else {
                // Ambiguous â€” fallback to DD-MM-YYYY
                return `${year.toString().padStart(4, "0")}-${part2
                    .toString()
                    .padStart(2, "0")}-${part1.toString().padStart(2, "0")}`;
            }
        } else if (dateStr.match(/^\d{4}\/\d{2}\/\d{2}$/)) {
            parts = dateStr.split("/");
            return `${parts[0]}-${parts[1]}-${parts[2]}`;
        } else if (dateStr.match(/^\d{4}-\d{2}-\d{2}$/)) {
            return dateStr;
        }

        return null;
    };

    const isValidDate = (dateStr) => {
        const d = new Date(dateStr);    // i didn't do this. It's really important. Do for rest..
        return !isNaN(d.getTime());     // Checks if the date is really there in real calendar!!!
    }

    const dateMap = new Map();

    const isValidTime = (time) => {
        const [hh, mm] = time.split(":").map(Number);
        return (
            time.match(/^\d{2}:\d{2}$/) &&
            hh >= 0 &&
            hh <= 23 &&
            mm >= 0 &&
            mm <= 59
        );
    }

    const normalizeTitle = (title) => {
        return title.trim().split(/\s+/).map(word => word[0]?.toUpperCase() + word.slice(1).toLowerCase()).join(" ");
    }

    for (const { date, time, eventTitle } of events) {
        const stdDate = formatDate(date);
        if (!stdDate || !isValidDate(stdDate) || !isValidTime(time)) continue;

        const normalizedTitle = normalizeTitle(eventTitle);
        if (!dateMap.has(stdDate)) dateMap.set(stdDate, []);
        dateMap.get(stdDate).push({ time, title: normalizedTitle });
    }

    const sortedDates = Array.from(dateMap.keys()).sort();

    for (const day of sortedDates) {
        const eventsForDay = dateMap.get(day).sort((a, b) => a.time.localeCompare(b.time))
        console.log(day);
        for (const ev of eventsForDay) {
            console.log(ev.title)
        }
    }
}

const { events } = getInput();
buildCalendar(events);